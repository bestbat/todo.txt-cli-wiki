List your Todo.sh add-ons here. Include a short description and a link to the GitHub repository or other location.

h3. Table of Contents

* Installation
** "How to install":#install

* Filters
** "Future Tasks":#futuretasks

* New/Enhanced Actions
** "Add and do or prioritize in one step":#adddopri
** "Archive only selected done items":#archiveselected
** "Edit in a designated text editor":#edit
** "cd - Display directory paths":#cd
** "nav - Open URLs in a web browser":#nav
** "ac - Open activeCollab URLs in a web browser":#ac
** "birdseye - Project progress report":#birdseye
** "projectview - Group output by project":#projectview
** "paper - Print your todo list":#paper
** "commit - Record state in local Git repository":#commit
** "rtm - Sync with Remember the Milk":#rtm
** "schedule - Work with date threshold":#schedule
** "view - Summarized todo items report":#view
** "lately - Report of recently completed tasks":#lately
** "repeat - Mark an item done and immediately reenter it":#repeat
** "recur - Intelligently add recurring tasks":#recur
** "google - Sync with Google Tasks":#google
** "standup - Daily standup status":#standup
** "docs - Sync with Google Docs":#docs
** "mit - Most Important Task tracking":#mit

h1(#install). Installation

To learn how to install (and create) add-ons, see [[Creating and Installing Add-ons]].

h1. Filters

Since version 2.4, _todo.sh_ provides @TODOTXT_SORT_COMMAND@ and @TODOTXT_FINAL_FILTER@, which can be used to modify the list commands' output.

h2(#futuretasks). Future Tasks

Hide tasks containing a date threshold (@t:YYYY-MM-DD@) until the specified point in the future.

Note: The @date@ command "can be used":http://tech.groups.yahoo.com/group/todotxt/message/1843 to append date thresholds (e.g. @todo.sh append <#> "t:`date -d '1 day' +%F`"@).
The "schedule":http://github.com/FND/todo.txt-cli/blob/extensions/schedule extension provides a wrapper for this.

The @-x@ "option":http://tech.groups.yahoo.com/group/todotxt/message/2402 can be used to temporarily disable filtering and also display future tasks.

"Discussion thread":http://tech.groups.yahoo.com/group/todotxt/message/2296

"Project page":http://github.com/FND/todo.txt-cli/blob/extensions/futureTasks

"Download file":http://github.com/FND/todo.txt-cli/raw/extensions/futureTasks

h1. New or Enhanced Commands/Actions

h2(#adddopri). __add__ and __do__ / __add__ and __pri__ in one step

This is the example detailed here: [[Creating Add-ons: Examples]]

It allows to add an item and mark it as done in one shot with the following syntax:

 todo.sh add x Helping colleague to install linux

It also allows to set a priority when adding an item using the following syntax:

 todo.sh add pri A "Need to write plugin example on Gina's wiki"

"Project page":http://github.com/doegox/todo.txt-cli/blob/extras/todo.actions.d/add

"Download file":http://github.com/doegox/todo.txt-cli/raw/extras/todo.actions.d/add

Variations:
* __add__ and __do__  "Gina's addx":http://github.com/ginatrapani/todo.txt-cli/blob/addons/.todo.actions.d/addx
* __add__ and __pri__ "Gina's adda":http://github.com/ginatrapani/todo.txt-cli/blob/addons/.todo.actions.d/adda

h2(#archiveselected). Archive only selected done items

This allows to archive selectively one single item or a set of items matching a given keyword.
For example to archive all done items related to project1:

 todo.sh archive +project1

To archive item #17:

 todo.sh archive 17

Note that if the keyword is a number it is interpreted as an item number

"Project page":http://github.com/doegox/todo.txt-cli/blob/extras/todo.actions.d/archive

"Download file":http://github.com/doegox/todo.txt-cli/raw/extras/todo.actions.d/archive

h2(#edit). __edit__: open in text editor

To open @$TODO_DIR/todo.txt@ in your default text editor (@$EDITOR@ environment variable):

 todo.sh edit

To open @$TODO_DIR/done.txt@:

 todo.sh edit done

"Project page":http://github.com/mbrubeck/todo.txt-cli/blob/master/todo.actions.d/edit

"Download file":http://github.com/mbrubeck/todo.txt-cli/raw/master/todo.actions.d/edit

Adaptations:
* "doegox":http://github.com/doegox/todo.txt-cli/blob/extras/todo.actions.d/edit
* "dhein":http://github.com/dhein/todo.txt-cli/blob/pub-addons/edit ("discussion thread":http://tech.groups.yahoo.com/group/todotxt/message/2153)
* "FND":http://github.com/fnd/todo.txt-cli/blob/extensions/edit ("discussion thread":http://tech.groups.yahoo.com/group/todotxt/message/2156)

h2(#cd). __cd__: display directory paths

Outputs the command necessary to change the current directory to the directory holding the todotxt files, the directory holding add-ons or the directory holding the configuiration file.

"Discussion thread":http://tech.groups.yahoo.com/group/todotxt/message/2153

"Project page":http://github.com/dhein/todo.txt-cli/blob/pub-addons/cd

"Download file":http://github.com/dhein/todo.txt-cli/raw/pub-addons/cd

h2(#nav). __nav__: open item's URL in browser

 todo.sh add Should have a look at http://github.com/ginatrapani ASAP

TODO: 'Should have a look at http://github.com/ginatrapani ASAP' added on line 111.

 todo.sh nav 111

"Project page":http://github.com/doegox/todo.txt-cli/blob/extras/todo.actions.d/nav

"Download file":http://github.com/doegox/todo.txt-cli/raw/extras/todo.actions.d/nav

h2(#ac). __ac__: activeCollab integration

If activeCollab project/ticket info is associated with a task, open in the browser.

  todo.sh ac 12

"Project page":https://github.com/kostajh/todo.txt-ac

"Download file":https://raw.github.com/kostajh/todo.txt-ac/master/ac

h2(#commit). __commit__: record state in local Git repository

Commit all changes to existing Git repository in @$TODO_DIR@.

"Discussion thread":http://tech.groups.yahoo.com/group/todotxt/message/2150

"Project page":http://github.com/fnd/todo.txt-cli/blob/extensions/commit

"Download file":http://github.com/fnd/todo.txt-cli/raw/extensions/commit

h2(#birdseye). __birdseye__: your productivity report

A Python script @birdseye.py@ (called with the @birdseye@ action) analyzes the @todo.txt@ and @done.txt@ files to generate a report of completed and incomplete items in every context and project.  (Requires Python and both @birdseye.py@ and @birdseye@ files to run.)

"Project Page":http://github.com/ginatrapani/todo.txt-cli/tree/addons

h2(#paper). __paper__: print your todo list

This will print your todo list:

 todo.sh paper

Also you can choose your printer:

 todo.sh paper -d 'Canon-MP240'

Requires CUPS.

"Project page":http://github.com/matthewbauer/todo.txt-cli/blob/master/actions/paper

"Download file":http://github.com/matthewbauer/todo.txt-cli/raw/master/actions/paper

h2(#projectview). __projectview__: sorts tasks by projects

List tasks categorized by project.

Example:
<pre>
<code>
 ===== Projects =====

 --- Project1 ---
 01 item 1 

 --- Project2 ---
 02 item 2 
 04 item 4 

 --- Not in projects ---
 03 item3

</code>
</pre>

"Discussion thread":http://tech.groups.yahoo.com/group/todotxt/message/2333

"Project page":http://github.com/the1ts/todo.txt-plugins/blob/master/README.projects
"Download file":http://github.com/the1ts/todo.txt-plugins/raw/master/actions/projectview/projectview

h2(#rtm). __rtm__: sync with Remember the Milk

Supports push and pull, but it still needs some work.

This will push to Remember the Milk:

 todo.sh rtm push

This will pull from Remember the Milk:

 todo.sh rtm pull

You will need a web browser to accept the 

"Project page":http://github.com/matthewbauer/todo.txt-cli/blob/master/actions/rtm

"Download file":http://github.com/matthewbauer/todo.txt-cli/raw/master/actions/rtm

h2(#schedule). __schedule__: work with date threshold

Set, remove or change date threshold of an item. Works best together with the __Future Tasks__ filter. 

"Project page":http://github.com/FND/todo.txt-cli/blob/extensions/schedule

"Download file":http://github.com/FND/todo.txt-cli/raw/extensions/schedule

h2(#view). __view__: Summarized todo items report

Show todo items containing TERM, grouped by OPTION, and displayed in  priority order. If no TERM provided, displays entire todo.txt. The original idea and script is derived from projectview by Paul.

Example:
  $ todo.sh view project                 # Show todo items grouped by project
  $ todo.sh view project @context  # Show todo items grouped by project and filtered by @context
  $ todo.sh view date +project        # Show todo items grouped by date and filtered by +project
  $ todo.sh view after                    # Show todo items  grouped by date after and with today.
  $ todo.sh view before                  # Show todo items  grouped by date before and with today.
  $ todo.sh view before  +project   # Show todo items  grouped by date before and with today and filtered by +project

"Discussion thread":http://tech.groups.yahoo.com/group/todotxt/message/2750
"Project page":http://github.com/markwu/todo-cli-plugins
"Download file":http://github.com/markwu/todo-cli-plugins/raw/master/view

h2(#lately). __lately__: Report of recently completed tasks

Generate a list of recently completed tasks. Per default lately lists tasks that were completed during the last seven days. With an optional argument, number of days, that can be overridden to show more or less.

Examples:
<pre><code>$ todo.sh lately    # Lists tasks completed within the last 7 days
$ todo.sh lately 3  # Lists tasks completed within the last 3 days</code></pre>

"Download file":https://github.com/emilerl/emilerl/tree/master/todo.actions.d

h2(#repeat). __repeat__: Mark an item done and immediately reenters it.

This is useful for repeating todo items where the date entered is important. This command simply marks
the given item as done and reenters it again, optionally at a specified number of days from the completion date, or a specified number of days from the due date where this is one. Priority is not preserved.

Examples:
<pre><code>$ todo.sh repeat 3 # Marks item 3 as done and recreates is as a new item
$ todo.sh repeat 3 7 # Marks item 3 as done and recreates it 7 days from now
$ todo.sh repeat 3 +7 # Marks item 3 as done and recreates it 7 days from the due date</code></pre>

"Project page":https://github.com/drobertadams/todo.txt-cli-addons/tree/master/repeat
"Download file":https://raw.github.com/drobertadams/todo.txt-cli-addons/master/repeat/repeat

h2(#recur). __recur__: Intelligently add recurring tasks.

When run from a daily cron job (or similar scheduler), it will add tasks on appropriate days from a recur.txt file, while avoiding redundant adds of previously-added, not-yet-completed tasks.

"Project page":https://github.com/paulroub/todo.txt-recurring-tasks
"Download file":https://github.com/paulroub/todo.txt-recurring-tasks/blob/master/recur

h2(#google). __google__: sync with Google Tasks

Push or Pull todo items to and from Google Tasks. 

Examples:
<pre><code>$ todo.sh google pull       #pulls tasks from Google
$ todo.sh google push       #push todo items to Google
$ todo.sh google push all   #push todo and done items to Google
</code></pre>

You will need to set up Google API access to use (see project README). 
Requires Python

"Project page":http://github.com/amcintosh/todo.txt-cli/tree/google-tasks-addon/.todo.actions.d
"Download file":http://github.com/amcintosh/todo.txt-cli/tree/google-tasks-addon/.todo.actions.d/google

h2(#standup). __standup__: daily standup status

An add on implemented in ruby that generates a "report" for daily standups based on your tasks. 

"Project page":http://github.com/civrot/todo_txt_actions
"Download file":http://github.com/civrot/todo_txt_actions/blob/master/standup

h2(#docs). __docs__: sync with Google Docs

You can now sync your todo with Google Docs

Sharing your todos with people is now possible.
You can also sync your todos with third party tools like aNotes.

Examples:
<pre><code>$ todo.sh docs pull       #pulls todo from Google Docs
$ todo.sh docs push       #push todo to Google Docs
$ todo.sh docs help       #display help
</code></pre>

Requires:
* Google account (!) with a folder/tag chosen for todos items
* "Google CL":http://code.google.com/p/googlecl

Installation:
* Install Google CL and configure oAuth by typing *google docs list* and following wizard.
* Then simply run *pull* or *push*, a quick wizard will ask you the name of the Google folder/tag to sync and voila!

_Author: Amaury Decrême - amaury.decreme at gmail.com
Licence: GPL http://www.gnu.org/copyleft/gpl.html_

"Project page":https://github.com/amaurydecreme/todo.txt-cli/tree/addons/.todo.actions.d
"Download file":https://github.com/amaurydecreme/todo.txt-cli/blob/addons/.todo.actions.d/docs

h2(#mit). __mit__: Most Important Task tracking

Bash addon to help you track your Most Important Tasks.

Examples:
<pre><code>$ todo.sh mit today go do something    # use today or tomorrow to create a mit
$ todo.sh mit friday stash millions    # use a day of week to create a mit
$ todo.sh mit 2012.09.17 buy github    # use specific date to create a mit
$ todo.sh mit                          # display all mits
  Past Due:
    do something @home (12)
  Today:
    fix something @work (14)
$ todo.sh mit @home                    # display all mits in specified context
  Past Due:
    do something @home (12)
</code></pre>

_Author: Cody Buell_
_License: GPL http://www.gnu.org/copyleft/gpl.html_

"Project page":https://github.com/codybuell/mit